install.packages("data.table")
install.packages("psyphy")
install.packages("kernlab")
install.packages("caret")
install.packages("e1071")
install.packages("ISLR")
install.packages("splines")
install.packages("RANN")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
str(mixtures)
featurePlot(x = training[, c("age", "education", "jobclass")],
y = training$CompressiveStrength, plot = "pairs")
featurePlot(x = training[, ],
y = training$CompressiveStrength, plot = "pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer, main = "", xlab = "ave. capital run length")
hist(training$SuperPlasticizer, main = "")
str(training)
hist(training$Superplasticizer, main = "")
summary(training)
hist(log(training$Superplasticizer) + 1, main = "")
hist(log(training$Superplasticizer), main = "")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
hist(training$Superplasticizer), main = "")
hist(training$Superplasticizer, main = "")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer, main = "")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
runExample('01_hello')
runExample('02_text')
runExample('03_reactivity')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
library(manipulate); library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01,
initial = 0.05))
args = list(mean = mu0, sd = sigma/sqrt(n)),
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(20, 40)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01,
initial = 0.05))
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(20, 40)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01,
initial = 0.025))
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(20, 40)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01,
initial = 0.05))
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(20, 40)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 1)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01,
initial = 0.05))
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(20, 40)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 1)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 5),
mua = slider(30, 35, step = 1, initial = 35),
n = slider(1, 100, step = 1, initial = 25),
alpha = slider(0.01, 0.1, step = 0.01,
initial = 0.05))
x <- rnorm(30)
density(x)
hist(x, breaks = 20, prob = TRUE,
main = "",
cex.main = 0.75, cex.lab = 0.75, cex.axis = 0.75,
xlab = "")
lines(density(x), lty = 1, lwd = 1.5, col = "blue")
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(20, 40)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 1)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 5),
mua = slider(30, 35, step = 1, initial = 35),
n = slider(1, 100, step = 1, initial = 25),
alpha = slider(0.01, 0.1, step = 0.01,
initial = 0.05))
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 0
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(-10, 10)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 1)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 5),
mua = slider(-10, 10, step = 1, initial = 5),
n = slider(1, 100, step = 1, initial = 25),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
?power.t.test
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
?power.t.test
shiny::runApp('shiny_power')
power.t.test(n = 20, delta = 1)
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
power.t.test(n = 20, delta = 1)
library(xtab)
library(xtabs)
library(xtable)
xtabs(power.t.test(n = 20, delta = 1))
?xtabs
xtable(power.t.test(n = 20, delta = 1))
?xtable
hi <- xtable(power.t.test(n = 20, delta = 1))
str(power.t.test(n = 20, delta = 1))
unlist(power.t.test(n = 20, delta = 1))
stargazer(power.t.test(n = 20, delta = 1)
)
stargazer(power.t.test(n = 20, delta = 1), type = 'html')
power.t.test(n = 20, delta = 1)$n
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
?power.t.test
shiny::runApp('shiny_power')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
setwd("~/code/shiny_apps/shiny_crossOver")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library(shinyApp)
library(shinyapp)
library(shiny)
deployApp()
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
